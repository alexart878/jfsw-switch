#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITPRO)),)
$(error "Please set DEVKITPRO in your environment. export DEVKITPRO=<path to>/devkitpro")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITPRO)/libnx/switch_rules

#---------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# DATA is a list of directories containing data files
# INCLUDES is a list of directories containing header files
# ROMFS is the directory containing data to be added to RomFS, relative to the Makefile (Optional)
#
# NO_ICON: if set to anything, do not use icon.
# NO_NACP: if set to anything, no .nacp file is generated.
# APP_TITLE is the name of the app stored in the .nacp file (Optional)
# APP_AUTHOR is the author of the app stored in the .nacp file (Optional)
# APP_VERSION is the version of the app stored in the .nacp file (Optional)
# APP_TITLEID is the titleID of the app stored in the .nacp file (Optional)
# ICON is the filename of the icon (.jpg), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.jpg
#     - icon.jpg
#     - <libnx folder>/default_icon.jpg
#
# CONFIG_JSON is the filename of the NPDM config file (.json), relative to the project folder.
#   If not set, it attempts to use one of the following (in this order):
#     - <Project name>.json
#     - config.json
#   If a JSON file is provided or autodetected, an ExeFS PFS0 (.nsp) is built instead
#   of a homebrew executable (.nro). This is intended to be used for sysmodules.
#   NACP building is skipped as well.
#---------------------------------------------------------------------------------
TARGET		:=	jfsw
BUILD		:=	build
SOURCES		:=	.
DATA		:=	data
INCLUDES	:=	src jfbuild/include jfbuild/libsquish jfmact jfaudiolib/include

APP_TITLE   := 	Shadow Warrior
APP_AUTHOR  := 	alexart878
APP_VERSION := 	1.0-NX
ICON		:= 	rsrc/swlogo.jpg

# build locations
SRC=src
EINC=$(EROOT)/include
ELIB=$(EROOT)

#engine
EROOT ?= jfbuild
ESRC ?= $(EROOT)/src

MACTROOT ?= jfmact

AUDIOSRC = jfaudiolib/src

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
ARCH	:=	-march=armv8-a+crc+crypto -mtune=cortex-a57 -mtp=soft -fPIE

CFLAGS	:=	`$(PREFIX)pkg-config --cflags sdl2 SDL2_mixer SDL2_image` -Wall -O2 -ffunction-sections \
			$(ARCH) $(DEFINES)

CFLAGS	+=	$(INCLUDE) -D__SWITCH__ -DUSE_POLYMOST=1 -DUSE_OPENGL=USE_GLES2 -DNOASM -DHAVE_VORBIS -DHAVE_SDL

CXXFLAGS	:= $(CFLAGS) -fno-rtti -fno-exceptions

ASFLAGS	:=	-g $(ARCH)
LDFLAGS	=	-specs=$(DEVKITPRO)/libnx/switch.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

LIBS	:=	`$(PREFIX)pkg-config --libs sdl2 SDL2_mixer SDL2_image SDL2_ttf` \
			#-lvorbisfile -lvorbis -logg -lmpg123 -lc -ljpeg -lcurl -lz -lnx -lm

HOSTCXX	:= /usr/bin/g++

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:= $(PORTLIBS) $(LIBNX)


#---------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#---------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT	:=	$(CURDIR)/$(TARGET)
export TOPDIR	:=	$(CURDIR)

export VPATH	:=	$(foreach dir,$(SOURCES),$(CURDIR)/$(dir)) \
					$(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR	:=	$(CURDIR)/$(BUILD)

JFBUILDOBJS = \
	$(ESRC)/a-c.o \
  	$(ESRC)/asmprot.o \
	$(ESRC)/baselayer.o \
	$(ESRC)/cache1d.o \
	$(ESRC)/compat.o \
	$(ESRC)/crc32.o \
	$(ESRC)/defs.o \
	$(ESRC)/engine.o \
	$(ESRC)/glbuild.o \
	$(ESRC)/kplib.o \
	$(ESRC)/osd.o \
	$(ESRC)/polymost.o \
	$(ESRC)/hightile.o \
	$(ESRC)/mdsprite.o \
	$(ESRC)/polymosttex.o \
	$(ESRC)/polymosttexcache.o \
	$(ESRC)/pragmas.o \
	$(ESRC)/scriptfile.o \
	$(ESRC)/sdlayer2.o \
	$(ESRC)/textfont.o \
	$(ESRC)/talltextfont.o \
	$(ESRC)/smalltextfont.o \
	$(ESRC)/mmulti_null.o \
	$(ESRC)/version.o

ifneq ($(USE_POLYMOST),0)
	JFBUILDOBJS+= \
		$(ESRC)/polymosttexcompress.o \
		$(ESRC)/rg_etc1.o \
		${EROOT}/libsquish/alpha.o \
		${EROOT}/libsquish/colourblock.o \
		${EROOT}/libsquish/colourfit.o \
		${EROOT}/libsquish/colourset.o \
		${EROOT}/libsquish/clusterfit.o \
		${EROOT}/libsquish/maths.o \
		${EROOT}/libsquish/rangefit.o \
		${EROOT}/libsquish/singlecolourfit.o \
		${EROOT}/libsquish/squish.o
endif

JFMACTOBJS = \
	$(MACTROOT)/util_lib.o \
	$(MACTROOT)/file_lib.o \
	$(MACTROOT)/control.o \
	$(MACTROOT)/keyboard.o \
	$(MACTROOT)/mouse.o \
	$(MACTROOT)/mathutil.o \
	$(MACTROOT)/scriplib.o \
	$(MACTROOT)/animlib.o

JFAUDIOLIBOBJS= \
	$(AUDIOSRC)/drivers.o \
	$(AUDIOSRC)/fx_man.o \
	$(AUDIOSRC)/cd.o \
	$(AUDIOSRC)/multivoc.o \
	$(AUDIOSRC)/mix.o \
	$(AUDIOSRC)/mixst.o \
	$(AUDIOSRC)/pitch.o \
	$(AUDIOSRC)/vorbis.o \
	$(AUDIOSRC)/music.o \
	$(AUDIOSRC)/midi.o \
	$(AUDIOSRC)/driver_sdl.o \
	$(AUDIOSRC)/driver_nosound.o \
	$(AUDIOSRC)/asssys.o

GAMEOBJS = \
	$(SRC)/actor.o \
	$(SRC)/ai.o \
	$(SRC)/anim.o \
	$(SRC)/border.o \
	$(SRC)/break.o \
	$(SRC)/bunny.o \
	$(SRC)/cache.o \
	$(SRC)/cheats.o \
	$(SRC)/colormap.o \
	$(SRC)/config.o \
	$(SRC)/console.o \
	$(SRC)/coolg.o \
	$(SRC)/coolie.o \
	$(SRC)/copysect.o \
	$(SRC)/demo.o \
	$(SRC)/draw.o \
	$(SRC)/eel.o \
	$(SRC)/game.o \
	$(SRC)/girlninj.o \
	$(SRC)/goro.o \
	$(SRC)/grpscan.o \
	$(SRC)/hornet.o \
	$(SRC)/interp.o \
	$(SRC)/interpsh.o \
	$(SRC)/inv.o \
	$(SRC)/jplayer.o \
	$(SRC)/jsector.o \
	$(SRC)/jweapon.o \
	$(SRC)/lava.o \
	$(SRC)/light.o \
	$(SRC)/mclip.o \
	$(SRC)/menus.o \
	$(SRC)/miscactr.o \
	$(SRC)/morph.o \
	$(SRC)/net.o \
	$(SRC)/ninja.o \
	$(SRC)/osdfuncs.o \
	$(SRC)/osdcmds.o \
	$(SRC)/panel.o \
	$(SRC)/player.o \
	$(SRC)/predict.o \
	$(SRC)/quake.o \
	$(SRC)/ripper.o \
	$(SRC)/ripper2.o \
	$(SRC)/rooms.o \
	$(SRC)/rotator.o \
	$(SRC)/rts.o \
	$(SRC)/save.o \
	$(SRC)/scrip2.o \
	$(SRC)/sector.o \
	$(SRC)/serp.o \
	$(SRC)/setup.o \
	$(SRC)/skel.o \
	$(SRC)/skull.o \
	$(SRC)/slidor.o \
	$(SRC)/sounds.o \
	$(SRC)/spike.o \
	$(SRC)/sprite.o \
	$(SRC)/sumo.o \
	$(SRC)/swconfig.o \
	$(SRC)/sync.o \
	$(SRC)/text.o \
	$(SRC)/track.o \
	$(SRC)/vator.o \
	$(SRC)/version.o \
	$(SRC)/vis.o \
	$(SRC)/wallmove.o \
	$(SRC)/warp.o \
	$(SRC)/weapon.o \
	$(SRC)/zilla.o \
	$(SRC)/zombie.o \
	$(SRC)/saveable.o

#---------------------------------------------------------------------------------
# use CXX for linking C++ and libEGL dependent projects
#---------------------------------------------------------------------------------
export LD	:=	$(CXX)

export OFILES_SRC	:=	$(JFBUILDOBJS) $(GAMEOBJS) $(JFMACTOBJS) $(JFAUDIOLIBOBJS)
export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES))
export OFILES 	:=	$(OFILES_BIN) $(OFILES_SRC)

export HFILES_BIN	:=	$(addsuffix .h,$(subst .,_,$(BINFILES)))

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
					$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
					-I$(CURDIR)/$(BUILD) -I$(PORTLIBS)/include

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

ifeq ($(strip $(CONFIG_JSON)),)
	jsons := $(wildcard *.json)
	ifneq (,$(findstring $(TARGET).json,$(jsons)))
		export APP_JSON := $(TOPDIR)/$(TARGET).json
	else
		ifneq (,$(findstring config.json,$(jsons)))
			export APP_JSON := $(TOPDIR)/config.json
		endif
	endif
else
	export APP_JSON := $(TOPDIR)/$(CONFIG_JSON)
endif

ifeq ($(strip $(ICON)),)
	icons := $(wildcard *.jpg)
	ifneq (,$(findstring $(TARGET).jpg,$(icons)))
		export APP_ICON := $(TOPDIR)/$(TARGET).jpg
	else
		ifneq (,$(findstring icon.jpg,$(icons)))
			export APP_ICON := $(TOPDIR)/icon.jpg
		endif
	endif
else
	export APP_ICON := $(TOPDIR)/$(ICON)
endif

ifeq ($(strip $(NO_ICON)),)
	export NROFLAGS += --icon=$(APP_ICON)
endif

ifeq ($(strip $(NO_NACP)),)
	export NROFLAGS += --nacp=$(CURDIR)/$(TARGET).nacp
endif

ifneq ($(APP_TITLEID),)
	export NACPFLAGS += --titleid=$(APP_TITLEID)
endif

ifneq ($(ROMFS),)
	export NROFLAGS += --romfsdir=$(CURDIR)/$(ROMFS)
endif

.PHONY: $(BUILD) clean all

#---------------------------------------------------------------------------------
all: $(BUILD)

$(BUILD):

	@mkdir -p $@
	@mkdir -p $@/src
	@mkdir -p $@/jfbuild
	@mkdir -p $@/jfbuild/src
	@mkdir -p $@/jfbuild/libsquish
	@mkdir -p $@/jfmact
	@mkdir -p $@/jfaudiolib
	@mkdir -p $@/jfaudiolib/src

	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.switch

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
ifeq ($(strip $(APP_JSON)),)
	@rm -fr $(BUILD) $(TARGET).nro $(TARGET).nacp $(TARGET).elf
else
	@rm -fr $(BUILD) $(TARGET).nsp $(TARGET).nso $(TARGET).npdm $(TARGET).elf
endif


#---------------------------------------------------------------------------------
else
.PHONY:	all

DEPENDS	:=	$(OFILES:.o=.d)

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
ifeq ($(strip $(APP_JSON)),)

all	:	$(OUTPUT).nro

ifeq ($(strip $(NO_NACP)),)
$(OUTPUT).nro	:	$(OUTPUT).elf $(OUTPUT).nacp
else
$(OUTPUT).nro	:	$(OUTPUT).elf
endif

else

all	:	$(OUTPUT).nsp

$(OUTPUT).nsp	:	$(OUTPUT).nso $(OUTPUT).npdm

$(OUTPUT).nso	:	$(OUTPUT).elf

endif

$(OUTPUT).elf	:	$(OFILES)

$(OFILES_SRC)	: $(HFILES_BIN)

#---------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#---------------------------------------------------------------------------------
%.bin.o	%_bin.h :	%.bin
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

%.o: %.cc
	$(CXX) $(CXXFLAGS) -c $< -o $@

-include $(DEPENDS)

#---------------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------------